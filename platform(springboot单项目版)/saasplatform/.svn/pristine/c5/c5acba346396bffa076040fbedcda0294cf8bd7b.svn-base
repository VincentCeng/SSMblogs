package com.saas.admin.config;

import com.saas.admin.model.Permission;
import com.saas.admin.model.Role;
import com.saas.admin.model.User;
import com.saas.admin.service.IUserPermissionService;
import com.saas.admin.service.IUserRoleService;
import com.saas.admin.service.IUserService;
import org.apache.shiro.authc.*;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.apache.shiro.util.ByteSource;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * @Description
 * @Author 张喜明
 * @Date 2018-06-29 10:28
 */
public class ShiroRealm extends AuthorizingRealm {
    @Autowired
    private IUserPermissionService userPermissionService;

    @Autowired
    private IUserRoleService userRoleService;

    @Autowired
    private IUserService userService;

    public ShiroRealm(){

    }

    /**
     * 授权
     * @param principalCollection
     * @return
     */
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        String username = (String)principalCollection.getPrimaryPrincipal();
        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();

        //权限获取
        List<Permission> authorities = userPermissionService.findUserPerssion(username);

        Set<String> permisssionSets = new HashSet<>();
        for (Permission perm:authorities) {
            permisssionSets.add(perm.getPermissionName());
        }
        info.setStringPermissions(permisssionSets);

        //角色获取
        List<Role> roles = userRoleService.findUserRoles(username);
        Set<String> roleNames = new HashSet<>();

        for (Role role:roles) {
            roleNames.add(role.getRoleName());
        }
        info.addRoles(roleNames);

        return info;
    }

    /**
     * 认证
     * @param Atoken
     * @return
     * @throws AuthenticationException
     */
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken Atoken) throws AuthenticationException {
        UsernamePasswordToken token = (UsernamePasswordToken)Atoken;
        String userName = token.getUsername();

        User user = userService.getByUserName(userName);
        if (user == null) {
            throw new UnknownAccountException();
        }
        String password =user.getPassword();

        //SimpleAuthenticationInfo会将你Token中的账号密码通过getName（）
        //这个方法获取，与传入的username及password进行对比，byteSource是盐值，
        //是为了加密时使用的。这里采用了盐值存储在用户信息中的方式，而盐值的设置是在
        //注册用户时设置的，采用的是随机字符串形式，当然也可以采用随机数格式
        SimpleAuthenticationInfo AInfo = new SimpleAuthenticationInfo(userName,password, ByteSource.Util.bytes(user.getUid()),getName());
        return AInfo;
    }
}
