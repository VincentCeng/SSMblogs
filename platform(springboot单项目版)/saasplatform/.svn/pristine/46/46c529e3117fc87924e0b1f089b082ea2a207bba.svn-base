package com.saas.admin.config;

import com.saas.common.RedisSessionDao;
import com.saas.common.SaasSessionIdGenerator;
import org.apache.shiro.authc.credential.HashedCredentialsMatcher;
import org.apache.shiro.spring.LifecycleBeanPostProcessor;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.apache.shiro.web.servlet.SimpleCookie;
import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.DependsOn;
import org.springframework.data.redis.core.RedisTemplate;
import javax.servlet.Filter;
import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.shiro.mgt.SecurityManager;

/**
 * @Description
 * @Author 张喜明
 * @Date 2018-06-29 10:03
 */

@Configuration
public class ShiroConfiguration {

    @Bean(name = "lifecycleBeanPostProcessor")
    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() {
        return new LifecycleBeanPostProcessor();
    }

    /**
     * @Description 过滤器及映射路径配置
     * @Author 张喜明
     * @Date 2018/6/29 10:19
     * @Param [securityManager, redisTemplate]
     * @return ShiroFilterFactoryBean
     */
    @Bean(name = "shiroFilter")
    public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager,RedisTemplate redisTemplate) {
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);
        //配置拦截需要user/authc身份的跳转路径。
        shiroFilterFactoryBean.setLoginUrl("/signin.html");
        //配置登陆成功后跳转页面
        shiroFilterFactoryBean.setSuccessUrl("/index.html");
        //配置权限不足时跳转的页面
        shiroFilterFactoryBean.setUnauthorizedUrl("/403.html");

        //过滤器链
        Map<String, Filter> filters = new LinkedHashMap<>();
//      filters.put("perms", urlPermissionsFilter());
        // TODO
//      filters.put("logout", new MySignOutFilter(redisTemplate));
        shiroFilterFactoryBean.setFilters(filters);

        //权限映射链
        Map<String, String> filterChainDefinitionMap = new LinkedHashMap<>();
        filterChainDefinitionMap.put("/static/**", "anon");
        filterChainDefinitionMap.put("/403.html", "anon");
        filterChainDefinitionMap.put("/signin.html", "anon");
        filterChainDefinitionMap.put("/signout", "logout");
        filterChainDefinitionMap.put("/**/delete*/**", "perms[Archer]");
        filterChainDefinitionMap.put("/**/select*/**", "perms[Saber]");
        filterChainDefinitionMap.put("/**/find*/**", "perms[Saber]");
        filterChainDefinitionMap.put("/**/update*", "perms[Lancer]");
//        filterChainDefinitionMap.put("/**/insert*", "perms[Berserker]");
        filterChainDefinitionMap.put("/regist.html", "anon");
        filterChainDefinitionMap.put("/contact.html", "authc,roles[天下无双]");
        filterChainDefinitionMap.put("/post.html", "user,roles[Master]");
        filterChainDefinitionMap.put("/about.html", "user");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);
        return shiroFilterFactoryBean;
    }

    /**
     * @Description 安全管理模块
     * @Author 张喜明
     * @Date 2018/6/29 10:25
     * @Param [redisTemplate]
     * @return java.lang.SecurityManager
     */
    @Bean(name = "securityManager")
    public SecurityManager securityManager(RedisTemplate redisTemplate) {
        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();

        //自定义realm
        securityManager.setRealm(shiroRealm(redisTemplate));

        //自定义session管理 使用redis
        securityManager.setSessionManager(sessionManager(redisTemplate));

//    //自定义缓存实现 使用redis
//    securityManager.setCacheManager(redisCacheManager());

        //注入记住我管理器;
//        securityManager.setRememberMeManager(rememberMeManager());

        return securityManager;
    }

    @Bean(name = "shiroRealm")
    @DependsOn(value = {"lifecycleBeanPostProcessor", "ShiroRedisCacheManager"})
    public ShiroRealm shiroRealm(RedisTemplate redisTemplate) {
        ShiroRealm shiroRealm = new ShiroRealm();
        //设置缓存管理器
        shiroRealm.setCacheManager(redisCacheManager(redisTemplate));
        shiroRealm.setCachingEnabled(true);
        //设置认证密码算法及迭代复杂度
        shiroRealm.setCredentialsMatcher(credentialsMatcher());
        //认证
        shiroRealm.setAuthenticationCachingEnabled(false);
        //授权
        shiroRealm.setAuthorizationCachingEnabled(false);
        return shiroRealm;
    }

    /**
     * realm的认证算法
     * @return
     */
    @Bean(name = "hashedCredentialsMatcher")
    public HashedCredentialsMatcher credentialsMatcher() {
        HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher("md5");
        //2次迭代
        credentialsMatcher.setHashIterations(2);
        credentialsMatcher.setStoredCredentialsHexEncoded(true);
        return credentialsMatcher;
    }

    /**
     * 缓存管理器的配置
     * @param redisTemplate
     * @return
     */
    @Bean(name = "ShiroRedisCacheManager")
    public ShiroRedisCacheManager redisCacheManager(RedisTemplate redisTemplate) {
        ShiroRedisCacheManager redisCacheManager = new ShiroRedisCacheManager(redisTemplate);
        //name是key的前缀，可以设置任何值，无影响，可以设置带项目特色的值
        redisCacheManager.createCache("shiro_redis");
        return redisCacheManager;
    }

    /**
     *  配置sessionmanager，由redis存储数据
     */
    @Bean(name = "sessionManager")
    @DependsOn(value = "lifecycleBeanPostProcessor")
    public DefaultWebSessionManager sessionManager(RedisTemplate redisTemplate) {
        DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();
        RedisSessionDao redisSessionDao = new RedisSessionDao(redisTemplate);
        //这个name的作用也不大，只是有特色的cookie的名称。
        redisSessionDao.setSessionIdGenerator(sessionIdGenerator("starrkCookie"));
        sessionManager.setSessionDAO(redisSessionDao);
        sessionManager.setDeleteInvalidSessions(true);
        SimpleCookie cookie = new SimpleCookie();
        cookie.setName("starrkCookie");
        sessionManager.setSessionIdCookie(cookie);
        sessionManager.setSessionIdCookieEnabled(true);
        return sessionManager;
    }

    /**
     * 自定义的SessionId生成器
     * @param name
     * @return
     */
    public SaasSessionIdGenerator sessionIdGenerator(String name) {
        return new SaasSessionIdGenerator(name);
    }
}
